/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import Modelo.*;
import static interfaces.Menu.*;
import java.awt.Color;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gadv1
 */
public class agregarPlatillo extends javax.swing.JPanel {

    Aceites aceite = new Aceites(0,0,0,0,"","");
    Carne carne = new Carne(0,0,0,0,"","");
    Condimento condimento = new Condimento(0,0,0,0,"","");
    Gaseosa gaseosa = new Gaseosa(0,0,0,0,"","");
    HarinayDerivado harina = new HarinayDerivado(0,0,0,0,"","");
    Lacteo lacteo = new Lacteo(0,0,0,0,"","");
    Legumbre legumbre = new Legumbre(0,0,0,0,"","");
    DefaultTableModel model;
    LinkedList<IngredientesMenu> listaIngredientes =  new LinkedList() ;
    int i =0;
    
    public agregarPlatillo() {
        initComponents();
        model = (DefaultTableModel)tabla.getModel();
        vaciarFilas(model, tabla);
        aceite.llenarTablaAceite(aXML.listaAceites(),tabla,aXML);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        panelRound1 = new Modelo.PanelRound();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        labelC = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(174, 53, 117));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Ingredientes del platillo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel18)
                .addContainerGap(451, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aceite", "Carne", "Condimento", "Gaseosa", "Harina y derivado", "Lacteo", "Legumbre" }));
        comboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel20.setText("Cantidad del ingrediente:");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 153, 153));
        jLabel21.setText("*Seleccione un producto");

        panelRound1.setBackground(new java.awt.Color(224, 108, 136));
        panelRound1.setRoundBottomLeft(30);
        panelRound1.setRoundBottomRight(30);
        panelRound1.setRoundTopLeft(30);
        panelRound1.setRoundTopRight(30);
        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "Unidad", "Cantidad", "Fecha"
            }
        ));
        tabla.setGridColor(new java.awt.Color(153, 153, 153));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        panelRound1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 770, 200));

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Continuar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        labelC.setBackground(new java.awt.Color(0, 0, 0));
        labelC.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelC.setText("0");

        jLabel19.setBackground(new java.awt.Color(0, 0, 0));
        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel19.setText("Productos agregados:");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel22.setText("Tipo de producto:");

        spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel22)
                .addGap(2, 2, 2)
                .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(284, 284, 284)
                .addComponent(jLabel19)
                .addGap(3, 3, 3)
                .addComponent(labelC, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel20)
                .addGap(2, 2, 2)
                .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(670, 670, 670)
                .addComponent(jLabel21))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(panelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(340, 340, 340)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel19))
                    .addComponent(labelC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel21)
                .addGap(5, 5, 5)
                .addComponent(panelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoActionPerformed
        switch(comboTipo.getSelectedItem().toString()){
            case "Aceite":
            vaciarFilas(model,tabla);
             aceite.llenarTablaAceite(aXML.listaAceites(),tabla,aXML);
            break;
            case"Carne":
            vaciarFilas(model,tabla);
            carne.llenarTablaCarne(cXML.listaCarne(),tabla,cXML);
            break;
            case"Condimento":
            vaciarFilas(model,tabla);
            condimento.llenarTablaCondimento(coXML.listaCondimento(),tabla,coXML);
            break;
            case"Gaseosa":
            vaciarFilas(model,tabla);
            gaseosa.llenarTablaGaseosa(gXML.listaGaseosa(),tabla,gXML) ;
            break;
            case"Harina y derivado":
            vaciarFilas(model,tabla);
            harina.llenarTablaHarina( hXML.listaHarina(),tabla,hXML) ;
            break;
            case"Lacteo":
            vaciarFilas(model,tabla);
            lacteo.llenarTablaLacteo(lcXML.listaLacteos(),tabla,lcXML);
            break;
            case"Legumbre":
            vaciarFilas(model,tabla);
            legumbre.llenarTablaLegumbre(leXML.listaLegumbre(),tabla,leXML) ;
            break;
        }
    }//GEN-LAST:event_comboTipoActionPerformed

    private void tablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMousePressed

    }//GEN-LAST:event_tablaMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GestionMenu m = new GestionMenu();
        m.setSize(920,528);
        m.setLocation(0,0);
        
        this.removeAll();
        this.add(m,new org.netbeans.lib.awtextra.AbsoluteConstraints(0,0,-1,-1));
        this.revalidate();
        this.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(!listaIngredientes.isEmpty()){
        detallesPlatillo m = new detallesPlatillo(listaIngredientes);
        m.setSize(920,528);
        m.setLocation(0,0);
        
        this.removeAll();
        this.add(m,new org.netbeans.lib.awtextra.AbsoluteConstraints(0,0,-1,-1));
        this.revalidate();
        this.repaint();
        }
        else{
          JOptionPane.showMessageDialog(null, "Ingrese almenos un ingrediente del platillo para continuar.");  
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

     int sp = (int) spinner.getValue();
     if(sp != 0){
        if (tabla.getSelectedRow() == -1){    //Guarda los ingredientes en el xml y llena la tabla de ingredientes ingresados
            JOptionPane.showMessageDialog(null, "Seleccione un elemento de la tabla");
        } 
        else {
          if(!tabla.getValueAt(tabla.getSelectedRow(),0).toString().equalsIgnoreCase("")){
            switch(comboTipo.getSelectedItem().toString()){
                case "Aceite":
                if(aXML.verificarAceite(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Aceite","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    }
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
                case"Carne":
                if(cXML.verificarCarne(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Carne","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    }
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
                case"Condimento":
                if(coXML.verificarCondimento(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Condimento","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    }
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
                case"Gaseosa":
                if(gXML.verificarGaseosa(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Gaseosa","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    }                 
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
                case"Harina y derivado":
                if(hXML.verificarHarina(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Harina y derivado","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    } 
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
                case"Lacteo":
                if(lcXML.verificarLacteo(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Lacteo","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    }                
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
                case"Legumbre":
                if(leXML.verificarLegumbre(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){
                    if(!verificarListaIngredientes(tabla.getValueAt(tabla.getSelectedRow(),0).toString())){                        
                        IngredientesMenu ig = new IngredientesMenu(tabla.getValueAt(tabla.getSelectedRow(),0).toString(),"Legumbre","",sp,tabla.getValueAt(tabla.getSelectedRow(),2).toString());
                        listaIngredientes.add(ig);
                        aumentarContador();
                        mostrarMensajeAgregado(tabla.getValueAt(tabla.getSelectedRow(),0).toString());
                    }
                    else{
                        mostrarMensajeRepetido();
                    }            
                }
                else{
                    mostrarMensajeNoEncontrado();
                }
                break;
            }
         }
        } 
      }
     else{
       JOptionPane.showMessageDialog(null, "Ingrese una cantidad valida");  
     }
    }//GEN-LAST:event_jButton2ActionPerformed

    void vaciarFilas(DefaultTableModel model,JTable tabla){
        model.getDataVector().removeAllElements();
        tabla.updateUI();
    }
    
    
    void aumentarContador(){
        i++;
        labelC.setText(String.valueOf(i));
    }
    
    void mostrarMensajeNoEncontrado(){
        JOptionPane.showMessageDialog(null, "El producto no se encuentra registrado");
    }
    
    void mostrarMensajeAgregado(String nombre){
        JOptionPane.showMessageDialog(null, "El ingrediente ("+nombre+") fue asignado al platillo.");
    }
    
    void mostrarMensajeRepetido(){
        JOptionPane.showMessageDialog(null, "No se permiten ingredientes repetidos.");
    }
    
    boolean verificarListaIngredientes(String nombre){
        boolean b = false;
        if(!listaIngredientes.isEmpty()){
         for(int i = 0; i < listaIngredientes.size(); i++ ){
            if(listaIngredientes.get(i).getNombre().equalsIgnoreCase(nombre)){
                b = true;
                break;
            }
         }
        }
        return b; 
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelC;
    private Modelo.PanelRound panelRound1;
    private javax.swing.JSpinner spinner;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
